#!/bin/ksh
# @Object: Create version files
# @Author: S.Chamberland
# @Date:   March 2014
. pfbase.inc.dot
DESC='Create version files'
USAGE="USAGE: ${MYSELF} [-h] [-f] PKGNAME PKGVERSION [DESTDIR [TYPE [FORMAT]]]"

usage_long() {
	 toto=$(echo -e $USAGE)
	 more <<EOF
$DESC

$toto

Options:
    -h, --help   : print this help
    -f, --force  : force file creation if already exists
    PKGNAME      : Package Name
    PKGVERSION   : Package Version Number
    DESTDIR      : Dir where to creat the file [Default: .]
    TYPE         : Version File Type of  [c, f, sh] [Default: sh]
    FORMAT       : Version File Name Format [s, l] [Default: l]
EOF
}

if [[ x$1 == x-h || x$1 == x--help ]] ; then
   usage_long
   exit 0
fi

myforce=0
if [[ x$1 == x-f || x$1 == x--force ]] ; then
   myforce=1
   shift
fi
PKGNAME=$1
PKGVERSION=$2
DESTDIR=${3:-.}
MODE=${4:-sh}
NAMEFMT=${5:-l}
if [[ x$PKGNAME == x || x$PKGVERSION == x ]] ; then
   myerror "PKGNAME or PKGVERSION not provided"
fi

PKGNAME=$(echo $PKGNAME | tr 'a-z' 'A-Z')
PKGVERSION=$(echo $PKGVERSION)
pkgname_=$(echo $PKGNAME | tr 'A-Z' 'a-z')
production_date=$(date '+%Y-%m-%d %H:%M %Z')

mkdir -p ${DESTDIR} 2>/dev/null || true
chmod u+w ${DESTDIR} || true
versionfilename=${DESTDIR}/${pkgname_}_version.dot
[[ x${NAMEFMT} == xs ]] && versionfilename=${DESTDIR}/.VERSION
prefix='export'
sep='='
if [[ x$MODE == xc ]] ; then
   versionfilename=${DESTDIR}/${pkgname_}_version.h
   prefix='#define'
   sep=' '
elif [[ x$MODE == xf ]] ; then
   versionfilename=${DESTDIR}/${pkgname_}_version.inc
   prefix='       character(len=50),parameter ::'
   sep=' = '
fi
if [[ -f ${versionfilename} && $myforce == 0 ]] ; then
   echo "WARNING: Version file already exists, to overwrite use:"
   echo "         ${0##*/} -f $PKGNAME $PKGVERSION $DESTDIR $MODE $NAMEFMT"
   exit 0
fi
cat > ${versionfilename} << EOF
$prefix ${PKGNAME}_NAME_S${sep}"${PKGNAME}"
$prefix ${PKGNAME}_VERSION_S${sep}"${PKGVERSION}"
$prefix ${PKGNAME}_DSTP_S${sep}"${production_date}"
$prefix ${PKGNAME}_EC_ARCH_S${sep}"${EC_ARCH}"
EOF
# [[ $? == 0 ]] && echo ${versionfilename} & exit 0
# exit 1

