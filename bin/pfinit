#!/bin/ksh
# @Object: Initial setup of a PF workdir
# @Author: S.Chamberlands
# @Date:   June 2014
#
# build-HOST-COMP -> $(model_path storage)/MY_NAME/COMP_ARCH
# .../build-HOST-COMP/
# .../build-HOST-COMP/src/...
# .../build-HOST-COMP/f90/...
# .../build-HOST-COMP/obj/...
# .../build-HOST-COMP/mod/...
# .../build-HOST-COMP/lib/...
# .../build-HOST-COMP/bin/...
#
# src_ref/...
# src/...

##
# Help
##
DESC='Initial setup of a PF workdir'
USAGE="USAGE: . pfinit [-h] [-v] [-f] [--comp=COMPILER] [--import=COMPONENTS] [--clone=PATH] NAME VERSION"
usage_long() {
   . ${purplefrog}/include/${BASE_ARCH}/default.comp.dot
   . .pfbase.inc.dot

	 toto=$(echo -e $USAGE)
	 cat <<EOF
$DESC

$toto

Options:
    -h, --help      : print this help
    -v, --verbose   : verbose mode
    -f, --force     : force, overwrite present installation 
                      [Not fully implemented yet]
    --comp=COMP     : use compiler COMP instead of the default one
                      [Default: \${COMP_ARCH:-$(. ${purplefrog}/include/${BASE_ARCH}/default.comp.dot; echo $COMP_ARCH)}]
    --srcpath=PATH  : List of dir where to look for src COMPONENT/VERSION
                      [Default: $(pf_src_path)]
    --import=COMPONENTS: List of component/version to import,
                         or components list file
    --clone=PATH    : Path to PF dir to clone
                      or Path to PF build clone file

    NAME            : Project Name
    VERSION         : Project Version

BUILD files will be located under (uses \$storage_model): 
    $STORAGE_BIN

EOF
}

##
# Cloning fn
##
pf_clone_dir() {
   _clonedir=$1
   if [[ -f ${_clonedir}/.pf.comp.${BASE_ARCH}.dot ]] ; then
      . ${_clonedir}/.pf.comp.${BASE_ARCH}.dot
   fi
   . ${purplefrog}/include/${BASE_ARCH}/default.comp.dot
   . .pfbase.inc.dot
   _here=$(pwd)
   cd $_clonedir
   #TODO: BUILD=
   if [[ pf_check_dir -ne 0 ]] ; then
      mystderr 0 "WARNING: clonedir is not PF dev dir: $_clonedir"
      return 1
   fi
   #TODO: if _here is already a PF dev dir, check if consistent
   for _myfile in $PF_BASE_FILE ; do
      cp $_myfile $_here/ 1>&2
   done
   cp Makefile* $_here/ 1>&2
   rsync -a $SRC_REF/ $_here/$SRC_REF/
   rsync -a $SRC_USR/ $_here/$SRC_USR/
   if [[ ! -d $BUILD ]] ; then
      for item in $(ls -d build-*-${COMP_ARCH}) ; do
         if [[ -d $item ]] ; then
            BUILD=$item
            break
         fi
      done
   fi
   if [[ -d $BUILD ]] ; then
      mystderr 0 "++ Cloning Build dir: $BUILD "
      rsync -a $BUILD/ $_here/$(pfmodel_link build)/ 1>&2
   else
      mystderr 0 "++ No Build dir found for: build-*-${COMP_ARCH}"
   fi
   BUILD=$(pfmodel_link build)
   cd $_here/$(pfmodel_link build/src)
   find . -name ${_myfile} -type l -exec rm -f {} \;
   cd $_here
}

pf_clone_file() {
   echo "WARNING: clone file Not implemented yet" 1>&2
   return 1

   _clonefile=$1
   clonesubdirlist="src mod obj lib bin"
   hasclonesrc=0
   _here=$(pwd)
   cd $STORAGE_BIN/
   for mysubdir in $clonesubdirlist ; do
      myecho 1 "++ Clone build dir: $mysubdir .tgz"
         #TODO: check tar options for --force
      tar xzf $_clonefile $mysubdir
      if [[ $? -ne 0 ]] ; then
         myecho 0 "WARNING: incomplete clone, missing $mysubdir in $_clonefile"
      elif [[ $mysubdir == src ]] ; then 
         hasclonesrc=1
      fi
   done
   cd $_here/$(pfmodel_link build/src)
   find . -name ${_myfile} -type l -exec rm -f {} \;
   cd $_here
   #tar xzf $_clonefile $SRC_REF
   #tar xzf $_clonefile src_usr
   #mv src_usr $SRC_USR
   for _myfile in $PF_BASE_FILE ; do
      tar xzf $_clonefile $_myfile
   done

}

##
# Basic dirs and links
##
pf_basic_dirs() {
   mystderr 0 "++ Prep basic dirs and links: $SRC_REF, $SRC_USR, $BUILD"
   logfile=$(pwd)/.pfinit.log
   for mydir in $BUILD_SUB_DIR_LIST ; do
      mkdir -p $STORAGE_BIN/$mydir 2>/dev/null || true
   done
   if [[ x${COMP_ARCH} == x ]] ; then
      mystderr 0 "ERROR: COMP_ARCH is not defined; cannot create build dir"
      exit 1
   fi
   rm -f $BUILD
   ln -sf $STORAGE_BIN $BUILD 2>/dev/null || true
   echo ${TRUE_HOST:-$(hostname)}:$STORAGE_BIN $BUILD >> $logfile

   mkdir -p $SRC_REF 2>/dev/null || true
   mkdir -p $SRC_USR 2>/dev/null || true

   if [[ -d $ROOT/$BUILD_SRC ]] ; then
      find $ROOT/$BUILD_SRC -type l -exec rm -f {} \;
   fi
}

##
# Basic Makefiles
##
pf_basic_makefiles() {
   mystderr 1 "++ Add/Update Purplefrog build system: Makefiles"
   if [[ x$myforce == x-f || ! -f ${ROOT}/Makefile ]] ; then
      cp ${purplefrog}/include/Makefile.root.mk  ${ROOT}/Makefile
      cp ${purplefrog}/include/Makefile.build.mk ${BUILD_OBJ}
   else
      mystderr 1 "WARNING: Purplefrog Makefiles already exists"
      needforce=1
   fi
}

##
# Basic Env.Var.
##
pf_basic_env() {
   mystderr 1 "++ Setting Basic Env.Var."
   if [[ x$myforce == x-f || ! -f ${ROOT}/.setenv.dot || ! -f  ${ROOT}/.pf.ssm.bndl ]] ; then
      cp ${purplefrog}/etc/setenv.basic.dot ${ROOT}/.setenv.dot
      echo ${purplefrog_bndl} > ${ROOT}/.pf.ssm.bndl
   else
      mystderr 1 "WARNING: Purplefrog Env.Var. Setup files already exists"
      needforce=1
   fi
   cat <<EOF >> ${ROOT}/.pf.comp.${BASE_ARCH}.dot
export PF_COMPILER_VERSION=\${PF_COMPILER_VERSION:-${PF_COMPILER_VERSION:-1.0.0}}
export COMP_ARCH=\${COMP_ARCH:-${COMP_ARCH}}
EOF
   pf_src_path_add ${srcpath:-$SRC_PATH_DEFAULT}
   if [[ x$myforce == x-f || ! -f  ${ROOT}/.pf.project.dot ]] ; then
      cat <<EOF > ${ROOT}/.pf.project.dot
export ATM_MODEL_NAME=${ATM_MODEL_NAME:-noname}
export ATM_MODEL_VERSION=${ATM_MODEL_VERSION:-1.0.0}
EOF
   else
      mystderr 1 "WARNING: Purplefrog Project file already exists"
      needforce=1
   fi

   touch .pf.components
}

##
# Main PF init fn
##
pf_init_fn() {
   myverbose=""
   verbose=0
   myforce=0
   srcpath=""
   addcomponents=""
   clone=""
   while [[ $# -gt 0 ]] ; do
      case $1 in
         (-h|--help) return 1;;
         (-v|--verbose) ((verbose++));myverbose='-v';;
         (-f|--force) myforce=-f;;
         (--comp=*) export COMP_ARCH=${1#*=};;
         (--srcpath=*) srcpath=$(echo ${1#*=}|tr ' ,;\t' '::::');;
         (--import=*) addcomponents="${1#*=}";;
         (--clone=*) clone=${1#*=};;
         (--) shift ; break ;;
         -*) echo  1>&2 ; echo "ERROR: Option Not recognized: $1" 1>&2; echo  1>&2; usage_long ; return 1;;
         *) break ;;
      esac
      shift
   done

   needforce=0
   . ${purplefrog}/include/${BASE_ARCH}/default.comp.dot
   . .pfbase.inc.dot

   if [[ x"$clone" != x ]] ; then
      pf_basic_dirs
      if [[ -d $clone ]] ; then
         pf_clone_dir $clone
      elif [[ -f $clone ]] ; then
         pf_clone_file $clone
      else
         cat <<EOF 1>&2
WARNING: Clone not found, ignoring: $clone
EOF
      fi
   fi

   arg1=${1%%/*}
   arg2=${2:-${1##*/}}
   if [[ -f .pf.project.dot ]] ; then
      . .pf.project.dot
      if [[ "${ATM_MODEL_NAME}/${ATM_MODEL_VERSION}" != "${arg1}/${arg2}" ]] ; then
         mystderr 0 "Using existing dev dir setup for ${ATM_MODEL_NAME}/${ATM_MODEL_VERSION}, ignoring provided NAME/VERSION ${arg1}/${arg2}" 1>&2
      fi
   fi

   export ATM_MODEL_NAME=${ATM_MODEL_NAME:-$arg1}
   export ATM_MODEL_VERSION=${ATM_MODEL_VERSION:-$arg2}
   if [[ x"$ATM_MODEL_NAME" == x || x"$ATM_MODEL_VERSION" == x || x"$ATM_MODEL_NAME" == x"$ATM_MODEL_VERSION" ]] ; then
      mystderr 0
      mystderr 0 "ERROR: Need to provide the project NAME and VERSION"
      mystderr 0
      return 1
   fi

   if [[ x"$clone" == x ]] ; then
      pf_basic_dirs
   fi
   pf_basic_env
   pf_basic_makefiles
   if [[ $needforce == 1 ]] ; then
      mystderr 1 "Use 'pfinit -f' to force update"  1>&1
   fi
   if [[ x$addcomponents != x ]] ; then
      if [[ -f $addcomponents ]] ; then
         pfimport $myverbose --skip_mkdep --file="$addcomponents"
      else
         pfimport $myverbose --skip_mkdep $addcomponents
      fi
   fi
   if [[ -f .pf.components ]] ; then
      pfimport $myverbose --file="$(pwd)/.pf.components" --force=bin --nowarn_if_exists
   fi
}

## ====================================================================
#TODO: if already init... abort
#TODO: if not base env var... abort

pf_init_fn $*
_status=${_status:-$?}
if [[ $_status == 0 ]] ; then
   unset _status
   . .pf.comp.${BASE_ARCH}.dot
   if [[ x"${0##*/}" == x"pfinit" ]] ; then
      cat <<EOF

WARNING: To complete pfinit, please source .setenv.dot
          . .setenv.dot $COMP_ARCH

EOF
   else
      if [[ $verbose -eq 0 ]] ; then
         . .setenv.dot $COMP_ARCH >/dev/null
      else
         . .setenv.dot $COMP_ARCH
      fi
   fi
else
   usage_long
   if [[ x"${0##*/}" == x"pfinit" ]] ; then
      exit $_status
   else
      unset _status
      return 1
   fi
fi
