#!/bin/ksh
# @Object: Echo specific RDE var or path
# @Author: S.Chamberland
# @Date:   March 2014

# Display help in xterm if user clicked on the file 
#if [[ -z $@ && $DISPLAY ]] && ! tty -s; then 
#    xterm -hold -e "$(dirname "$0")/$(basename "$0")" -h; exit 
#fi 

MYSELF=${0##*/}
DESC='Echo specific RDE var or path'
USAGE="Usage: ${MYSELF} [-h] [-l] [--arch ARCH]"

usage_long() {
	 toto=$(echo -e $USAGE)
	 more 1>&2 <<EOF
$DESC

$toto

Options:
    -h, --help  : print this help
    -l, --list  : list known vars, with short match if any
        --arch  : provide var as if EC_ARCH were provided arch

EOF
}

doshfile=0
domkfile=0
dolist=0
namelist=""
if [[ x$RDE_USE_OLD_ARCH != x1 ]] ; then
   export RDE_KNOWN_BASE_ARCH="ubuntu-10.04-amd64-64 ubuntu-12.04-amd64-64 aix-7.1-ppc7-64"
   export RDE_KNOWN_BASE_ARCH_OLD="ubuntu-10.04-amd64-64:Linux_x86-64 ubuntu-12.04-amd64-64:Linux_x86-64 aix-7.1-ppc7-64:AIX-powerpc7"
   #TODO: export RDE_KNOWN_ARCH=
   export RDE_BASE_ARCH=$ORDENV_PLAT
else
   export RDE_KNOWN_BASE_ARCH="Linux_x86-64 AIX-powerpc7"
   export RDE_KNOWN_BASE_ARCH_OLD="Linux_x86-64:Linux_x86-64 AIX-powerpc7:Linux_x86-64"
   #TODO: export RDE_KNOWN_ARCH=
   export RDE_BASE_ARCH=${EC_ARCH%%/*}
fi
export RDE_COMP_ARCH=${EC_ARCH#*/}
DEP_ARCH=${RDE_BASE_ARCH}/${RDE_COMP_ARCH}
while [[ $# -gt 0 ]] ; do
   case $1 in
      (-h|--help) usage_long; exit 0;;
      (-l|--list) dolist=1; shift ; break;;
      (--arch) 
         if [[ x$2 != x && x$(echo $2 | cut -c1) != x- ]] ; then
            shift ; DEP_ARCH=$1
         fi;;
      (--mkfile)  domkfile=1; shift ; break;;
      (--shfile)  doshfile=1; shift ; break;;
      (--) shift ; break;;
      (-*) echo "ERROR: Option Not recognized: $1" 1>&2 ; exit 1;;
      *) namelist="$namelist $1";;
    esac
    shift
done
namelist="$namelist $@"
export RDE_ARCH=$DEP_ARCH
export RDE_BASE_ARCH=${DEP_ARCH%%/*}
export RDE_COMP_ARCH=${DEP_ARCH#*/}
export RDE_ARCH_FLAT=${RDE_BASE_ARCH}_${RDE_COMP_ARCH}

INCSUFFIXES=".cdk .h .hf .fh .itf90 .inc .include"
SRCSUFFIXES=".c .cpp .f .ftn .ptn .f90 .f95 .f03 .ftn90 .ptn90 .cdk90 .tmpl90 .F .FOR .F90 .F95 .F03"

#RDE_COMP_ARCH0=${RDE_ARCH##*/}
#hostarch=-${TRUE_HOST}-${RDE_COMP_ARCH:-${RDE_COMP_ARCH0:-unknown}}
hostarch=-${RDE_BASE_ARCH}
hostarch2=-${RDE_BASE_ARCH}/${RDE_COMP_ARCH}

RDE_EXP_ROOT=${RDE_EXP_ROOT:-.}
RDE_CONFIG_FILE=${RDE_EXP_ROOT}/.rde.config.dot
RDE_INC=$rde/include/$RDE_COMPILER_VERSION
SRC_PATH_FILE=${RDE_EXP_ROOT}/.rde.srcpath.dot


myrde_arch_list() {
   echo "$(cd $RDE_INC ; find */* -type d)"
}
myrde_base_arch_list() {
   echo "$(cd $RDE_INC ; rdefind * --type=d --maxdepth=0)"

}
myrdeconfigvar() {
   if [[ -r $RDE_CONFIG_FILE ]] ; then
      . $RDE_CONFIG_FILE
   fi
   echo $(eval "echo $(echo \${$1})")
}
mysrcpathvar() {
   if [[ -r $SRC_PATH_FILE ]] ; then
      . $SRC_PATH_FILE
   fi
   echo $(eval "echo $(echo \${$1})")
}

mybasearch() {
   for item in $RDE_KNOWN_BASE_ARCH_OLD ; do
      if [[ x${item%:*} == x$RDE_BASE_ARCH ]] ; then
         echo ${item#*:}
         return
      fi
   done
}

myvars="
 base_arch=       \$(mybasearch);
 rdeinc=          \$RDE_INC;
 rdesuffix=       \$INCSUFFIXES \$SRCSUFFIXES;
 rdesuffix/inc=   \$INCSUFFIXES;
 rdesuffix/src=   \$SRCSUFFIXES;
 rde_config_file= \$RDE_CONFIG_FILE;
 rde_known_arch_list=   \$RDE_KNOWN_ARCH;
 rde_known_base_arch_list= \$RDE_KNOWN_BASE_ARCH;
 rde_supp_arch_list=   \$(myrde_arch_list);
 rde_supp_base_arch_list= \$(myrde_base_arch_list);
 rde_linked_arch_list= \$(myrdeconfigvar RDE_LINKED_ARCH_LIST);
 rde_arch=        \$RDE_ARCH;
 rde_arch_flat=   \$RDE_ARCH_FLAT;
 rde_base_arch=   \$RDE_BASE_ARCH;
 rde_comp_arch=   \$RDE_COMP_ARCH;
 build=           build\${hostarch};
 build/src=       build\${hostarch2};
 build/pre=       build\${hostarch2};
 build/obj=       build\${hostarch2};
 build/mod=       build\${hostarch2};
 build/lib=       build\${hostarch2};
 build/bin=       build\${hostarch};
 build/run=       build\${hostarch};
 local/src=       .;
 local/bin=       bin;
 ref/src=         ref/src;
 ref/bin=         ref/bin;
 srcpathfile=     \${SRC_PATH_FILE};
 srcpath=         \$(mysrcpathvar SRCPATH);
 srcpath_maxdepth= \$(mysrcpathvar SRCPATH_MAXDEPTH);
 srcpath_r=       \$(mysrcpathvar SRCPATH_R);
 srcpath_arch_list= \$(mysrcpathvar SRCPATH_ARCH_LIST);
 srcpath_topdirs= \$(mysrcpathvar SRCPATH_TOPDIRS);
 storage=         \$(rdemodel_path -l storage);
 Makefile_dep=    Makefile.dep.\${RDE_ARCH_FLAT}.mk;
"


if [[ $domkfile == 1 ]] ; then
   filename=Makefile.const.${RDE_BASE_ARCH}.mk
   echo > $filename
   #echo $eval $(echo $myvars | sed 's/;[ ]/;/g' | sed 's/=[ ]/ = /g') | tr ';' '\n'
   knownnames="$(echo $myvars | tr ';' '\n' | sed 's/=.*$//g' )"
   for myname in $knownnames ; do
      myvar="$(echo $myvars | tr ';' '\n' | grep "^ ${myname}=")"
      if [[ ! -n $myvar ]] ; then
         myvar="$(echo $myvars | tr ';' '\n' | grep "^${myname}=")"
      fi
      myname2=CONST_$(echo $myname | tr 'a-z' 'A-Z' | sed 's/\///g')
      echo "$myname2 := $(eval echo $(echo $myvar | cut -d= -f2))" >> $filename
   done
fi


if [[ $doshfile == 1 ]] ; then
   filename=.rde.const.${RDE_BASE_ARCH}.dot
   echo > $filename
   #echo $eval $(echo $myvars | sed 's/;[ ]/;/g' | sed 's/=[ ]/ = /g') | tr ';' '\n'
   knownnames="$(echo $myvars | tr ';' '\n' | sed 's/=.*$//g' )"
   for myname in $knownnames ; do
      myvar="$(echo $myvars | tr ';' '\n' | grep "^ ${myname}=")"
      if [[ ! -n $myvar ]] ; then
         myvar="$(echo $myvars | tr ';' '\n' | grep "^${myname}=")"
      fi
      myname2=CONST_$(echo $myname | tr 'a-z' 'A-Z' | sed 's/\///g')
      echo "$myname2='$(eval echo $(echo $myvar | cut -d= -f2))'" >> $filename
   done
fi


if [[ $dolist == 1 ]] ; then
   knownnames="$(echo $myvars | tr ';' '\n' | sed 's/=.*$//g' )"
   myname0=$(echo $namelist | cut -d' ' -f1)
   knownnames1=""
   for myname in $knownnames ; do
      myname2=$(echo $myname | sed "s|^$myname0||")
      if [[ x$myname0 == x || x$myname2 != x$myname ]] ; then
         knownnames1="$knownnames1 $myname"
      fi
   done
   echo "$knownnames1"
   exit 0
fi

for item in $namelist ; do
   myvar="$(echo $myvars | tr ';' '\n' | grep "^ ${item}=")"
   if [[ ! -n $myvar ]] ; then
      myvar="$(echo $myvars | tr ';' '\n' | grep "^${item}=")"
   fi
   if [[ -n $myvar ]] ; then
      echo $(eval echo $(echo $myvar | cut -d= -f2))
   else
      echo "ERROR: Unknown var name: $item" 1>&2
      exit 1
   fi
done

