#!/bin/ksh
# @Object: Prepare list of dir and links
# @Author: S.Chamberlands
# @Date:   March 2014
#
# build-HOST-COMP -> $(model_path storage)/MY_NAME/COMP_ARCH
# .../build-HOST-COMP/
# .../build-HOST-COMP/src/...
# .../build-HOST-COMP/f90/...
# .../build-HOST-COMP/obj/...
# .../build-HOST-COMP/mod/...
# .../build-HOST-COMP/lib/...
# .../build-HOST-COMP/bin/...
#
# src_lib/...
# src_usr/...
. pf.base.inc.ksh

DESC='Prepare list of dir and links'
USAGE="USAGE: ${MYSELF} [-h] [-v] [-f]"
usage_long() {
	 toto=$(echo -e $USAGE)
	 more <<EOF
$DESC

$toto

Options:
    -h, --help     : print this help
    -v, --verbose  : verbose mode
    -f, --force    : force, overwrite present installation 
                     [Not yet implemented]

EOF
}

myforce=0
while [[ $# -gt 0 ]] ; do
   case $1 in
      (-h|--help) usage_long; exit 0;;
      (-v|--verbose) ((verbose++));;
      (-f|--force) myforce=1;;
      (--) shift ; break;;
      (*) myerror "Option Not recognized: $1";;
    esac
    shift
done

logfile=$(pwd)/.${MYSELF}.log

for mydir in $BUILD_SUB_DIR_LIST ; do
   mkdir -p $STORAGE_BIN/$mydir 2>/dev/null || true
done
rm -f $BUILD
ln -sf $STORAGE_BIN $BUILD 2>/dev/null || true
echo ${TRUE_HOST:-$(hostname)}:$STORAGE_BIN $BUILD >> $logfile

mkdir -p $SRC_LIB 2>/dev/null || true
mkdir -p $SRC_USR 2>/dev/null || true

cd $STORAGE_BIN
hasbuild=0
if [[ -f ${purplefrog}/${ATM_MODEL_NAME}_${ATM_MODEL_VERSION}_build-${COMP_ARCH}.tgz ]] ; then
   #TODO: should this be avoided when src is already there? with an optional 'restore/force'
   hasbuild=1
   rm -rf ${BUILD_OBJ} ${BUILD_SRC} ${BUILD_MOD} ${BUILD_PRE} 2>/dev/null || true
   tar xzf ${purplefrog}/${ATM_MODEL_NAME}_${ATM_MODEL_VERSION}_build-${COMP_ARCH}.tgz
fi
cd $ROOT

for item in $ATM_MODEL_COMPONENTS ; do
   mypath=$(eval "echo \$$item")
   varname=$(echo ${item}_version)
   myversion="$(eval echo \$$varname)+"
   if [[ x$myversion == x ]] ; then
      myversion=${item}-dev
   fi
   cd $mypath/src
   varname=$(echo ATM_MODEL_${item}_subdirs)
   subdirlist="$(eval echo \$$varname)"
   if [[ x$subdirlist == x ]] ; then
      subdirlist="$(find -L . -type d)"
   fi

   if [[ ! -e $ROOT/$SRC_LIB/$item ]] ; then
      ln -sf $(pwd) $ROOT/$SRC_LIB/$item
   fi
   for mysubdir in ${subdirlist} ; do
      if [[ -d ./${mysubdir} ]] ; then
         mkdir -p $ROOT/$SRC_USR/$item/${mysubdir} 2>/dev/null || true
         for mydir in $BUILD_SUB_DIR_LIST ; do
            mkdir -p  $STORAGE_BIN/$mydir/$item/${mysubdir} 2>/dev/null || true
         done
         if [[ $hasbuild == 0 ]] ; then
            # echo rsync -rRLkth --del ./${mysubdir}/ $STORAGE_BIN/src/$item/${mysubdir}
            # rsync -rRLkth --del ./${mysubdir}/ $STORAGE_BIN/src/$item/${mysubdir}
            #TODO: should this cp be avoided when src is already there? with an optional 'restore/force'
            find $STORAGE_BIN/src/$item/${mysubdir} -type l -exec rm -f {} \;
            cp ./${mysubdir}/* $STORAGE_BIN/src/$item/${mysubdir} 2>/dev/null || true
         fi
      fi
   done
   find $STORAGE_BIN/src/$item -name Makefile -exec rm -f {} \;
   mkdir -p $STORAGE_BIN/src/$item/include 2>/dev/null || true
   mkdir -p $ROOT/$SRC_USR/$item/include 2>/dev/null || true
   pf.mk_version_file $item $myversion $ROOT/$SRC_USR/$item/include
   pf.mk_version_file $item $myversion $ROOT/$SRC_USR/$item/include c
   pf.mk_version_file $item $myversion $ROOT/$SRC_USR/$item/include f

   #TODO: rsync build tree from lib
done

cd ${ROOT}
cp ${purplefrog}/include/Makefile.root.mk Makefile.root.mk
if [[ -f ${purplefrog}/include/${BASE_ARCH}/Makefile.dep.mk && \
    ! -f ${STORAGE_BIN}/obj/Makefile.dep.mk ]] ; then
   cp ${purplefrog}/include/${BASE_ARCH}/Makefile.dep.mk \
      ${STORAGE_BIN}/obj/Makefile.dep.mk
fi
ln -sf Makefile.root.mk Makefile

make -s sanity_nodep_force

exit 0
