#!/bin/ksh
# @Object: Basic definitions and functions
# @Author: S.Chamberland
# @Date:   March 2014
# @USAGE: . pfbase.inc.dot

if [[ x"${0##*/}" == x"pfbase.inc.dot" ]] ; then
   cat<<EOF 1>&1
=======================================
ERROR: This script should be sourced
       . $0
=======================================
EOF
   exit 1
fi

MYSELF=${0##*/}
COMP_ARCH=${COMP_ARCH:-${EC_ARCH#*/}}
STORAGE_BIN=$(model_path storage)/${COMP_ARCH}
ROOT=$(pwd)
BUILD=$(pfmodel_link build)
BUILD_SUB_DIR_LIST="$(pfmodel_link -l build)"
BUILD_BIN=$(pfmodel_link build/bin)
BUILD_LIB=$(pfmodel_link build/lib)
BUILD_MOD=$(pfmodel_link build/mod)
BUILD_OBJ=$(pfmodel_link build/obj)
BUILD_PRE=$(pfmodel_link build/pre)
BUILD_SRC=$(pfmodel_link build/src)
SRC_REF=$(pfmodel_link ref)
SRC_USR=$(pfmodel_link local)
verbose=${verbose:-0}

SRC_PATH_FILE=.pf.srcpath
SRC_PATH_DEFAULT=/users/dor/armn/sch/SsmBundles/data/purplefrog-src

PF_BASE_DIR0="$SRC_REF $SRC_USR"
PF_BASE_DIR="\$BUILD $SRC_REF $SRC_USR"
PF_BASE_FILE=".setenv.dot .pf.ssm.bndl .pf.project.dot .pf.comp.${BASE_ARCH}.dot .pf.srcpath .pf.components Makefile"

##
# Check if PWD is a PF dir
##
pf_exit_if_not_pftopdir() {
   pf_check_dir
   if [[ $? -ne 0 ]] ; then
      cat<<EOF 1>&2
=======================================
ERROR: $MYSELF should be run in a PurpleFrog top development dir
       Maybe you forgot to run "pfinit"?
=======================================
EOF
      exit 1
   fi
}
pf_check_dir() {
   for _mydir in $PF_BASE_DIR0 ; do
      if [[ ! -d $_mydir ]] ;then
         echo  "PF Dir not found: $_mydir" 1>&2
         mystderr 1 "PF Dir not found: $_mydir"
         return 1
      fi
   done
   for _myfile in $PF_BASE_FILE ; do
      if [[ ! -f $_myfile ]] ;then
         echo "PF File not found: $_myfile" 1>&2
         mystderr 1 "PF File not found: $_myfile"
         return 1
      fi
   done
   return 0
}

##
#
##
myerror() {
	more <<EOF

ERROR: $1

EOF
   usage_long
   exit 1
}

##
#
##
myecho() {
   if [[ $verbose -ge $1 ]] ; then
      shift
      echo $@ 2>&1
   fi
}
mystdout() {
   myecho $@
}
mystderr() {
   if [[ $verbose -ge $1 ]] ; then
      shift
      echo $@ 1>&2
   fi
}



##
#
##
find_src_local_file() {
   find_src_file ${SRC_USR} $@
}
find_src_ref_file() {
   find_src_file ${SRC_REF} $@
}
find_src_build_file() {
   find_src_file ${BUILD_SRC} $@
}
find_src_pre_file() {
   find_src_file ${BUILD_PRE} $@
}

find_src_file() {
   _mydir=$1
   _myfile=$2
   _here=$(pwd)
   cd ${ROOT}/${_mydir}
   if [[ -f ${_myfile} ]] ; then
      echo ${_myfile}
   else
      _mypath="$(find -L . -name ${_myfile} -type f 2>/dev/null)"
      echo ${_mypath#./}
   fi
   cd ${_here}
}

find_src() {
   _mydir=$1
   _myfile=$2
   _here=$(pwd)
   cd ${ROOT}/${_mydir}
   if [[ -r ${_myfile} ]] ; then
      echo ${_myfile}
   else
      _mypath="$(find -L . -name ${_myfile} 2>/dev/null)"
      echo ${_mypath#./}
   fi
   cd ${_here}
}

find_src_file_list() {
   _mydir=$1
   _myfile=$2
   _here=$(pwd)
   cd ${ROOT}/${_mydir}
   if [[ -f ${_myfile} ]] ; then
      echo ${_myfile}
   elif [[ -d ${_myfile} ]] ; then
      _mypath="$(find -L ${_myfile} -type f 2>/dev/null)"
      for _myfile2 in $_mypath ; do
         echo ${_myfile2#./}
      done
   else
      _mypath="$(find -L . -name ${_myfile} -type f 2>/dev/null)"
      echo ${_mypath#./}
   fi
   cd ${_here}
}

##
#
##
echo_deleted_tag() {
   _myfile=$1
   _itempath=${_myfile%/*}
   _itemname=${_myfile##*/}
   _itemname2=${_itemname#.rm.}
   echo ${_itempath}/.rm.${_itemname2}
}

echo_undeleted_tag() {
   _myfile=$1
   _itempath=${_myfile%/*}
   _itemname=${_myfile##*/}
   _itemname2=${_itemname#.rm.}
   echo ${_itempath}/${_itemname2}
}

is_src_local_deleted() {
   _myfile=$1
   _itempath=${_myfile%/*}
   _itemname=${_myfile##*/}
   _itemname2=${_itemname#.rm.}
   if [[ -f ${ROOT}/${SRC_REF}/${_itempath}/${_itemname2}  && \
         -f ${ROOT}/${SRC_USR}/${_itempath}/.rm.${_itemname2} \
         ]] ; then
      echo ${_itempath}/${_itemname2}
   fi
   echo ""
}

##
#
##
pf_src_path() {
   srcpath="$(cat ${SRC_PATH_FILE} 2>/dev/null | tr ' \n' '::')"
   echo ${srcpath:-$SRC_PATH_DEFAULT}
}
pf_src_path_add() {
   echo ${1:-$SRC_PATH_DEFAULT} | tr ':' '\n' >> $SRC_PATH_FILE
   cp $SRC_PATH_FILE $TMPDIR/${SRC_PATH_FILE}_$$
   cat $TMPDIR/${SRC_PATH_FILE}_$$ | sort -u > $SRC_PATH_FILE
   rm -f $TMPDIR/${SRC_PATH_FILE}_$$
}
