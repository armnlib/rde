
TODO:
* clone
* Use s.f90, s.f77 instead of s.compile
*.updatebuild: myrm_bidon, myrm_empty
* double ssmuse in .setenv.user.dot?

* component init script?
* iPython Compat?
* pfimport should not load component twice

* make all w/o make lib should work
* test if file recompiled when back to ref version
* test .setenv.dot COMP_ARCH not existing
* test .geminit [w/o version] in empty dir : 2cases with and without ATM_MODEL_VERSION defined
* option to use BASE_ARCH instead of TRUE_HOST for build dir name
* Running env (gemdev)
* gfortran... pending librmn
*.updatebuild: look for alternatives for links (file with file origine/rm) to avoid find operations 
* Makefile: replace for loops and recurse make by automatic targets as in Makefile.user.mk
* mv Makefile.user.mk my_bin into Makefile.build.mk
* pfdependencies add option to produce lib targets (not default)
* pfdependencies should also take list of file from stdin
* pfimport should also import etc?,shared? (on top of src,bin) in ref/

Done:
* pfinit/import
* make sure .version_file in src_usr have precedence over src_ref
* pf scripts should check if it's ok to run in PWD
* refactor s.dependencies.pl
* pfmv
* flat src
* Makefile.user.km default
* rm subdirs in bin,lib,...
* make gemdm should work
* Make -j (no NJOBS)
* add sample abs target in Makefile.user.mk
* (NOT DONE see why below) foolib(hack.o) : hack.o
        ar r foolib hack.o
  http://www.cs.utah.edu/dept/old/texinfo/make/make.html#SEC101
* add build/bin root/bin to PATH
* Better doc, wiki, make help, pfhelp, pfTOOL -h
* .setenv.dot should load .setenv.user.dot if it exists
*.updatebuild: pool find operation together
*.updatebuild: as in pfdiff, check .restricted recursively from top dir
*.updatebuild: .restricted; make sure src_usr/*/.restricted have precedence over src_ref
* test if src_usr is added
* pfimport should also import bin (on top of src) in bin_ref
* src_ref now ref/src
* sticky compiler... should prepend to .pf.comp.BASE_ARCH.dot (not append) 
*.updatebuild: myrm_mod
* pfmv --local
* find.py as an alternative to find
* Potential dependency problem w/ module in file with no code (no .o produced)
** .cdk90 with no code... produces no .o so it's always made!
* allow Compiler_rules override in topdir, src_ref and src
* pfsimilnames
* aix pfinit -v: pfinit[11]: verbose++: more tokens expected

* new: pfmerge
* new: find.py alternative
* new: pfco suggest similar names
* new: dir specific Compiler rules
* Versioned Makefiles
* Hides bin not inteded for end user
* cached update of build src tree
* new boot setup
* ksh fixes for AIX
* More verbosity (optional)
* intel diag-disable 7713
* xfl13 w/o legacy
* librmn_015


Special files:
* .restricted: whitelist of "$BASE_ARCH:" or "$EC_ARCH:" for dir access; located in src_ref, src dir to restrict; NOT recursive
* .version_file: whitelist of version files to produce; located in main src_ref, src dir of a component, version files are created in the component's include dir
* .rm.NAME: removed file (do not use src_ref version); location same src dir as where fiel was; NOT working for dir
* .setenv.dot
* user.setenv.dot
* .pf.init.dot
* .pfinit.log
* .pf.project.dot
* .pf.project.setenv.dot
* .pf.comp.BASE_ARCH.dot
* .pf.srcpath
* .pf.components
* .pf.flatsrc
* Makefile
* Makefile.user.mk
* Makefile.user.COMP_ARCH.mk
* src/*/Compiler_rules.dot


Why not to use Makefile target as mylib(mysub.o):
http://www.gnu.org/software/make/manual/make.html#Archives
11.3 Dangers When Using Archives
It is important to be careful when using parallel execution (the -j switch; see Parallel Execution) and archives. If multiple ar commands run at the same time on the same archive file, they will not know about each other and can corrupt the file.
Possibly a future version of make will provide a mechanism to circumvent this problem by serializing all recipes that operate on the same archive file. But for the time being, you must either write your makefiles to avoid this problem in some other way, or not use -j.

